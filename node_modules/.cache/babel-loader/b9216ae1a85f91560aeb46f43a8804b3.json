{"ast":null,"code":"var _jsxFileName = \"/Users/bryce.hao/practics/eos/src/containers/table.js\";\nimport React from 'react';\nimport { Table, Column, HeaderCell, Cell } from 'rsuite-table';\nimport './table.css';\nimport 'rsuite-table/dist/css/rsuite-table.css'; // or 'rsuite-table/dist/css/rsuite-table.css'\n\nconst rowKey = 'blockId';\n\nconst ExpandCell = ({\n  rowData,\n  dataKey,\n  expandedRowKeys,\n  onChange,\n  ...props\n}) => /*#__PURE__*/React.createElement(Cell, Object.assign({}, props, {\n  onClick: () => {\n    onChange(rowData);\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }\n}), /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }\n}, \" More \"));\n\nexport default class Tables extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expandedRowKeys: []\n    };\n    this.handleExpanded = this.handleExpanded.bind(this);\n  }\n\n  handleExpanded(rowData, dataKey) {\n    const {\n      expandedRowKeys\n    } = this.state;\n    let open = false;\n    const nextExpandedRowKeys = [];\n    expandedRowKeys.forEach(key => {\n      if (key === rowData[rowKey]) {\n        open = true;\n      } else {\n        nextExpandedRowKeys.push(key);\n      }\n    });\n\n    if (!open) {\n      nextExpandedRowKeys.push(rowData[rowKey]);\n    }\n\n    this.setState({\n      expandedRowKeys: nextExpandedRowKeys\n    });\n  }\n\n  render() {\n    const {\n      expandedRowKeys\n    } = this.state;\n    const data = this.props.data;\n    return /*#__PURE__*/React.createElement(Table, {\n      loading: this.props.loading,\n      height: 500,\n      className: \"block-tables\",\n      data: data,\n      rowKey: rowKey,\n      expandedRowKeys: expandedRowKeys,\n      onRowClick: data => {\n        console.log(data);\n      },\n      renderRowExpanded: rowData => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"block-tables-extend\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"pre\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 33\n          }\n        }, JSON.stringify(rowData, null, 4)));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Column, {\n      width: 70,\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }\n    }, \"#\"), /*#__PURE__*/React.createElement(ExpandCell, {\n      dataKey: \"id\",\n      expandedRowKeys: expandedRowKeys,\n      onChange: this.handleExpanded,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Column, {\n      width: 600,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    }, \"Block ID\"), /*#__PURE__*/React.createElement(Cell, {\n      dataKey: \"blockId\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Column, {\n      width: 300,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, \"Name\"), /*#__PURE__*/React.createElement(Cell, {\n      dataKey: \"timestamp\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Column, {\n      width: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }\n    }, \"actions\"), /*#__PURE__*/React.createElement(Cell, {\n      dataKey: \"actions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }\n    })));\n  }\n\n} // ReactDOM.render(<ExpandedTable />);\n// export default class Tables extends Component {\n//     shouldComponentUpdate(nextProps,nextState) {\n//         return true;\n//     }\n//     handleExpanded(rowData, dataKey) {\n//         const { data } = this.props;\n//\n//         let open = false;\n//         const nextExpandedRowKeys = [];\n//\n//         data.forEach(key => {\n//             if (key === rowData[rowKey]) {\n//                 open = true;\n//             } else {\n//                 nextExpandedRowKeys.push(key);\n//             }\n//         });\n//\n//         if (!open) {\n//             nextExpandedRowKeys.push(rowData[rowKey]);\n//         }\n//         this.setState({\n//             expandedRowKeys: nextExpandedRowKeys\n//         });\n//     }\n//    get form() {\n//         return (\n//             <Table\n//                 data={this.props.data}\n//                 className=\"block-tables\"\n//                 renderRowExpanded={rowData => {\n//                     return (\n//                         <div>\n//                             <p> {rowData}</p>\n//                         </div>\n//                     );\n//                 }}\n//             >\n//                 <Column width={600}>\n//                     <HeaderCell>Block ID</HeaderCell>\n//                     <Cell dataKey=\"blockId\" />\n//                 </Column>\n//\n//                 <Column width={300}>\n//                     <HeaderCell>Name</HeaderCell>\n//                     <Cell dataKey=\"timestamp\" />\n//                 </Column>\n//\n//                 <Column width={100}>\n//                     <HeaderCell>actions</HeaderCell>\n//                     <Cell dataKey=\"actions\" />\n//                 </Column>\n//             </Table>\n//         );\n//    }\n//     render(){\n//         const data = this.props.data;\n//         const columns = [\n//             {\n//                 name: 'Block ID',\n//                 selector: 'blockId',\n//             },\n//             {\n//                 name: 'TimeStamp',\n//                 selector: 'timestamp',\n//             },\n//             {\n//                 name: 'actions',\n//                 selector: 'actions',\n//             },\n//         ];\n//         return  (\n//             <div>\n//                 {this.form}\n//                 {/*<DataTable*/}\n//                 {/*    title=\"Blocks\"*/}\n//                 {/*    columns={columns}*/}\n//                 {/*    data={data}*/}\n//                 {/*/>*/}\n//             </div>\n//         );\n//     }\n//\n// }","map":{"version":3,"sources":["/Users/bryce.hao/practics/eos/src/containers/table.js"],"names":["React","Table","Column","HeaderCell","Cell","rowKey","ExpandCell","rowData","dataKey","expandedRowKeys","onChange","props","Tables","Component","constructor","state","handleExpanded","bind","open","nextExpandedRowKeys","forEach","key","push","setState","render","data","loading","console","log","JSON","stringify"],"mappings":"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Q,MAAA,KAAK,EAAE,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,oBAAC,IAAD;AAAM,MAAA,OAAO,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAlCJ,eAuCI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,eAEI,oBAAC,IAAD;AAAM,MAAA,OAAO,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAvCJ,CADJ;AA8CH;;AA9E+C,C,CAgFpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport { Table, Column, HeaderCell, Cell } from 'rsuite-table';\nimport './table.css'\nimport 'rsuite-table/dist/css/rsuite-table.css'; // or 'rsuite-table/dist/css/rsuite-table.css'\n\nconst rowKey = 'blockId';\nconst ExpandCell = ({ rowData, dataKey, expandedRowKeys, onChange, ...props }) => (\n    <Cell {...props} onClick={() => {\n        onChange(rowData);\n    }}>\n        <div> More </div>\n    </Cell>\n);\n\nexport default class Tables extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            expandedRowKeys: []\n        };\n        this.handleExpanded = this.handleExpanded.bind(this);\n    }\n    handleExpanded(rowData, dataKey) {\n        const { expandedRowKeys } = this.state;\n\n        let open = false;\n        const nextExpandedRowKeys = [];\n\n        expandedRowKeys.forEach(key => {\n            if (key === rowData[rowKey]) {\n                open = true;\n            } else {\n                nextExpandedRowKeys.push(key);\n            }\n        });\n\n        if (!open) {\n            nextExpandedRowKeys.push(rowData[rowKey]);\n        }\n        this.setState({\n            expandedRowKeys: nextExpandedRowKeys\n        });\n    }\n    render() {\n        const { expandedRowKeys } = this.state;\n        const data = this.props.data;\n        return (\n            <Table\n                loading={this.props.loading}\n                height={500}\n                className=\"block-tables\"\n                data={data}\n                rowKey={rowKey}\n                expandedRowKeys={expandedRowKeys}\n                onRowClick={data => {\n                    console.log(data);\n                }}\n                renderRowExpanded={rowData => {\n                    return (\n\n                            <div className=\"block-tables-extend\">\n                                <pre>{JSON.stringify(rowData, null, 4)}</pre>\n                            </div>\n\n                    );\n                }}\n            >\n                <Column width={70} align=\"center\">\n                    <HeaderCell>#</HeaderCell>\n                    <ExpandCell\n                        dataKey=\"id\"\n                        expandedRowKeys={expandedRowKeys}\n                        onChange={this.handleExpanded}\n                    />\n                </Column>\n\n                <Column width={600}>\n                    <HeaderCell>Block ID</HeaderCell>\n                    <Cell dataKey=\"blockId\" />\n                </Column>\n\n                <Column width={300}>\n                    <HeaderCell>Name</HeaderCell>\n                    <Cell dataKey=\"timestamp\" />\n                </Column>\n\n                <Column width={100}>\n                    <HeaderCell>actions</HeaderCell>\n                    <Cell dataKey=\"actions\" />\n                </Column>\n            </Table>\n        );\n    }\n}\n// ReactDOM.render(<ExpandedTable />);\n// export default class Tables extends Component {\n//     shouldComponentUpdate(nextProps,nextState) {\n//         return true;\n//     }\n//     handleExpanded(rowData, dataKey) {\n//         const { data } = this.props;\n//\n//         let open = false;\n//         const nextExpandedRowKeys = [];\n//\n//         data.forEach(key => {\n//             if (key === rowData[rowKey]) {\n//                 open = true;\n//             } else {\n//                 nextExpandedRowKeys.push(key);\n//             }\n//         });\n//\n//         if (!open) {\n//             nextExpandedRowKeys.push(rowData[rowKey]);\n//         }\n//         this.setState({\n//             expandedRowKeys: nextExpandedRowKeys\n//         });\n//     }\n//    get form() {\n//         return (\n//             <Table\n//                 data={this.props.data}\n//                 className=\"block-tables\"\n//                 renderRowExpanded={rowData => {\n//                     return (\n//                         <div>\n//                             <p> {rowData}</p>\n//                         </div>\n//                     );\n//                 }}\n//             >\n//                 <Column width={600}>\n//                     <HeaderCell>Block ID</HeaderCell>\n//                     <Cell dataKey=\"blockId\" />\n//                 </Column>\n//\n//                 <Column width={300}>\n//                     <HeaderCell>Name</HeaderCell>\n//                     <Cell dataKey=\"timestamp\" />\n//                 </Column>\n//\n//                 <Column width={100}>\n//                     <HeaderCell>actions</HeaderCell>\n//                     <Cell dataKey=\"actions\" />\n//                 </Column>\n//             </Table>\n//         );\n//    }\n//     render(){\n//         const data = this.props.data;\n//         const columns = [\n//             {\n//                 name: 'Block ID',\n//                 selector: 'blockId',\n//             },\n//             {\n//                 name: 'TimeStamp',\n//                 selector: 'timestamp',\n//             },\n//             {\n//                 name: 'actions',\n//                 selector: 'actions',\n//             },\n//         ];\n//         return  (\n//             <div>\n//                 {this.form}\n//                 {/*<DataTable*/}\n//                 {/*    title=\"Blocks\"*/}\n//                 {/*    columns={columns}*/}\n//                 {/*    data={data}*/}\n//                 {/*/>*/}\n//             </div>\n//         );\n//     }\n//\n// }\n"]},"metadata":{},"sourceType":"module"}